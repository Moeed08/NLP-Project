name: Stable Diffusion gRPC CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GRPC_PORT: 50051
  GRADIO_PORT: 7860
  IMAGE_NAME: stable-diffusion-grpc

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required for Docker push

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        python -m pip install --upgrade pip

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        python -m grpc_tools.protoc -I app/ --python_out=app/ --grpc_python_out=app/ app/service.proto

    - name: Start gRPC server
      run: |
        nohup python -m app.server > grpc.log 2>&1 &
        echo "GRPC_PID=$!" >> $GITHUB_ENV
        sleep 10  # Increased wait time

        # Verify server is running
        if ! curl -s http://localhost:$GRPC_PORT >/dev/null; then
          echo "::error::gRPC server failed to start!"
          cat grpc.log
          exit 1
        fi

    - name: Run gRPC tests
      run: |
        # Fix Python path issues
        export PYTHONPATH="$PYTHONPATH:$(pwd)"
        python -c "
        import grpc
        from app.service_pb2_grpc import StableDiffusionServiceStub
        from app.service_pb2 import HealthRequest
        channel = grpc.insecure_channel('localhost:${{ env.GRPC_PORT }}')
        stub = StableDiffusionServiceStub(channel)
        response = stub.HealthCheck(HealthRequest())
        assert response.status == 'SERVING', f'Server unhealthy: {response.status}'
        print('âœ… gRPC health check passed')
        "

    - name: Start Gradio UI
      run: |
        nohup python -m frontend.ui > gradio.log 2>&1 &
        echo "GRADIO_PID=$!" >> $GITHUB_ENV
        sleep 10  # Increased wait time

        # Verify UI is running
        if ! curl -s http://localhost:$GRADIO_PORT >/dev/null; then
          echo "::error::Gradio UI failed to start!"
          cat gradio.log
          exit 1
        fi

    - name: Run UI tests
      run: |
        curl -s http://localhost:${{ env.GRADIO_PORT }} | grep "Stable Diffusion Image Generator" || {
          echo "::error::Gradio UI test failed!"
          exit 1
        }
        echo "Gradio UI is running"

    - name: Stop services
      if: always()
      run: |
        kill $GRPC_PID 2>/dev/null || true
        kill $GRADIO_PID 2>/dev/null || true

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: service-logs
        path: |
          grpc.log
          gradio.log

    # Docker deployment (only on main branch)
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max